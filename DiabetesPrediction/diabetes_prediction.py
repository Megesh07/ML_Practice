# -*- coding: utf-8 -*-
"""Diabetes prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QeVizHYpgnXJVTB8uUgMhHa5znsAda3z

Importing Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data collection and analysis"""

#loading dataset
diabetes = pd.read_csv("/content/diabetes.csv")

#printing first 5 datasets
diabetes.head()

#number of rows and columns
 diabetes.shape

#statistical data
diabetes.describe()

diabetes["Outcome"].value_counts()

"""0 -> Non-diabetic
1 -> Diabetic
"""

diabetes.groupby("Outcome").mean()

"""Seperating the data & labels"""

X= diabetes.drop(columns="Outcome",axis=1)
Y= diabetes['Outcome']

X

Y

"""Data Standardization"""

scaler = StandardScaler()
Standard = scaler.fit_transform(X)
Standard

"""Train Test Split"""

X_train ,X_test , Y_train, Y_test = train_test_split(X,Y, test_size= 0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape , X_test.shape)

"""Training the model"""

classifier= svm.SVC(kernel="linear")

classifier.fit(X_train, Y_train)

"""Model Evalutaion"""

X_train_prediction = classifier.predict(X_train)
X_train_accuracy  = accuracy_score(X_train_prediction, Y_train)

print("X_train_accuracy :",X_train_accuracy)

X_test_prediction = classifier.predict(X_test)
X_test_accuracy  = accuracy_score(X_test_prediction, Y_test)

print("X_test_accuracy :",X_test_accuracy)

"""Making a predictive system"""

import numpy as np

# This must have 8 features only
input_data = (2, 108, 52, 26, 63, 32.5, 0.318, 22)

# Convert to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# Reshape for a single sample
input_data_reshape = input_data_as_numpy_array.reshape(1, -1)

# Apply standardization (ensure `scaler` is already fitted on training data)
standard = scaler.transform(input_data_reshape)
print("Standardized input:", standard)

# Make prediction (ensure `classifier` is already trained)
prediction = classifier.predict(standard)

# Output result
if prediction[0] == 0:
    print("The patient is Non-Diabetic")
else:
    print("The patient is Diabetic")